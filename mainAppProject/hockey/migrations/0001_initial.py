# Generated by Django 4.1.2 on 2022-11-17 14:47

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import hockey.UserManager


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Adresse mail')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='Prenom')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='Nom')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('groups', models.ManyToManyField(to='auth.group', verbose_name='Groupes')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', hockey.UserManager.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AbstractMoralEntity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='uploads/AbstractMoralEntity_files')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Nom')),
                ('link', models.URLField(verbose_name='Link')),
            ],
        ),
        migrations.CreateModel(
            name='Club',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(blank=True, max_length=255, null=True, verbose_name='Ville')),
                ('name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hockey.abstractmoralentity')),
            ],
        ),
        migrations.CreateModel(
            name='ExternalLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Nom')),
                ('link', models.URLField(verbose_name='Link')),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dateTime', models.DateTimeField(blank=True, null=True, verbose_name='Date et heure du match')),
                ('atHome', models.BooleanField(default=True, verbose_name='Match à la maison?')),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hockey.club', verbose_name='Club')),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, parent_link=True, to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
                ('phone', models.CharField(blank=True, max_length=30, validators=[django.core.validators.RegexValidator(regex='^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$')], verbose_name='Telephone')),
                ('birthday', models.DateField(verbose_name='Date de naissance')),
                ('location', models.CharField(blank=True, max_length=30, verbose_name='Lieu de naissance')),
                ('nationality', models.CharField(blank=True, max_length=30, verbose_name='Nationalite')),
                ('height', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(250), django.core.validators.MinValueValidator(100)], verbose_name='Taille')),
                ('weigth', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(15), django.core.validators.MaxValueValidator(200)], verbose_name='Poids')),
                ('manualPreference', models.CharField(blank=True, choices=[(1, 'Droitier'), (2, 'Gaucher')], max_length=8, null=True, verbose_name='Preference manuelle')),
                ('playerRole', models.CharField(blank=True, choices=[(1, 'Allié droite'), (2, 'Allié gauche'), (3, 'Centre'), (4, 'Défenseur droit'), (5, 'Défenseur gauche'), (6, 'Goalkeeper')], max_length=20, null=True, verbose_name='Role')),
                ('isMe', models.BooleanField(default=True, verbose_name="C'est moi")),
                ('licence', models.FileField(blank=True, null=True, upload_to='uploads/Player_files')),
            ],
        ),
        migrations.CreateModel(
            name='Rink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telephone', models.CharField(blank=True, max_length=30, validators=[django.core.validators.RegexValidator(regex='^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$')], verbose_name='Telephone')),
                ('localisation', models.CharField(blank=True, max_length=30, verbose_name='Localisation')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Adresse mail')),
                ('link', models.URLField(verbose_name='Link')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=30, verbose_name="Nom de l'equipe")),
                ('code', models.IntegerField(blank=True, null=True, verbose_name="Code de l'equipe")),
                ('photo', models.ImageField(blank=True, null=True, upload_to='uploads/Team_files')),
                ('captain', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, related_name='captain', to='hockey.player', verbose_name='Capitaine ')),
                ('assistant', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, related_name='assistant', to='hockey.player', verbose_name='Assistant')),
                ('trainer', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, related_name='trainer', to='hockey.player', verbose_name='Entreneur')),
                ('coach', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, related_name='coach', to='hockey.player', verbose_name='Coach')),
                ('minAge', models.IntegerField(blank=True, null=True, verbose_name="L'age minimal")),
                ('maxAge', models.IntegerField(blank=True, null=True, verbose_name="L'age maximal")),
                ('players', models.ManyToManyField(to='hockey.player', verbose_name='Joueur')),
            ],
        ),
        migrations.CreateModel(
            name='Timetable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('typeTimetable', models.CharField(blank=True, choices=[(1, 'Entrainement'), (2, 'Match')], max_length=20, null=True, verbose_name='Type horaire')),
                ('day', models.CharField(blank=True, choices=[(1, 'Lundi'), (2, 'Mardi'), (3, 'Mercredi'), (4, 'Jeudi'), (5, 'Vendredi'), (6, 'Samedi'), (7, 'Dimanche')], max_length=20, null=True, verbose_name='Jour')),
                ('startTime', models.TimeField(blank=True, null=True, verbose_name='Heure de Debut')),
                ('endTime', models.TimeField(blank=True, null=True, verbose_name='Heure de fin')),
                ('specialInfo', models.CharField(blank=True, choices=[(1, '(*) RDV 1h15 avant pour la séance'), (2, '(**) shooters sur convocation'), (3, 'HG = Hors Glace')], max_length=20, null=True, verbose_name='Informations spéciales')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hockey.team', verbose_name='Equipe')),
            ],
        ),
        migrations.CreateModel(
            name='Partner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('moralEntity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hockey.abstractmoralentity', verbose_name='Entité morale associe')),
            ],
        ),
        migrations.CreateModel(
            name='MatchResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ourScore', models.IntegerField(blank=True, null=True, verbose_name="Score de l'equipe maison")),
                ('theirScore', models.IntegerField(blank=True, null=True, verbose_name="Score de l'equipe adverse")),
                ('matchPaper', models.FileField(blank=True, null=True, upload_to='uploads/MatchResult_files', verbose_name='Feuille de match')),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hockey.match', verbose_name='Match')),
            ],
        ),
        migrations.AddField(
            model_name='match',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hockey.team', verbose_name='Equipe'),
        ),
    ]
